#version 450

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

layout (push_constant) uniform Properties
{
    vec4 Color;
    vec4 HSL;

    float ColorTemperature;
    float Hue;

    float White;
    float Black;

    float Exposure;
    float Contrast;
    float Hightlights;
    float Shadow;
    float Vividness;
} properties;

float avg(vec3 color)
{
    return (color.r + color.g + color.b) / 3;
}

vec3 rgb2hsv(vec3 c)
{
    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);
    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));
    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));

    float d = q.x - min(q.w, q.y);
    float e = 1.0e-10;
    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);
}

vec3 hsv2rgb(vec3 c)
{
    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

void main()
{
    vec4 res = imageLoad(inputImage, ivec2(gl_GlobalInvocationID.x , gl_GlobalInvocationID.y));

    res += properties.Color;

    res.xyz = clamp(res.xyz + properties.White * res.xyz * 0.5f,          0.0f, 1.0f);
    res.xyz = clamp(res.xyz + properties.Black * (1.0f - res.xyz) * 0.5f, 0.0f, 1.0f);

    float factor = 1.0;
    if (properties.Exposure > 0.0)
    {
        factor = 1.2; 
    }

    vec3 hsv = rgb2hsv(res.xyz);
    hsv.x  += properties.HSL.x;
    hsv.yz *= properties.HSL.yz + 1.0f;

    hsv.x = mod(hsv.x, 1.0f);
    hsv.yz = clamp(hsv.yz, 0.0f, 1.0f);

    res.xyz = hsv2rgb(hsv);

    /* Contrast */
    res.rgb = ((res.rgb - 0.5f) * max(1.0f + properties.Contrast, 0)) + 0.5f;

    res = pow(res, vec4(1 / (1.0 + factor * (properties.Exposure - properties.Contrast))));

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), res);
}
